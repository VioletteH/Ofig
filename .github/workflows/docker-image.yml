# workflow.yml (simplifié)
name: CI/CD Pipeline with Docker Compose and Jest

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # --- Phase de Test ---
    - name: Set NODE_ENV for tests
      run: echo "NODE_ENV=test" >> $GITHUB_ENV

    - name: Build and Run Test Services (with Biome and Jest)
      # Utilise docker-compose.test.yml pour construire les images et lancer les services.
      # La commande 'npm run check && npm test' est intégrée au service 'ofig-main-test'.
      # '--abort-on-container-exit' assure que le pipeline s'arrête si les tests échouent.
      run: docker compose -f docker-compose.test.yml --env-file .env.test up --build --abort-on-container-exit

    # --- Nettoyage ---
    - name: Clean up Test Docker Compose services
      if: always() # S'exécute même si les étapes précédentes échouent
      run: docker compose -f docker-compose.test.yml down

    # Tu peux supprimer ces étapes si Biome est maintenant intégré aux tests
    # Ou les garder si tu veux une étape Biome séparée pour le build de dev/prod
    # - name: Build Main service for Biome checks (using dev config)
    #   run: |
    #     set -a
    #     source ./docker.env
    #     set +a
    #     docker compose -f docker-compose.yml build ofig-main
    # - name: Run Biome checks (format and lint)
    #   run: |
    #     docker run --rm \
    #       -v "$(pwd)/main:/app" \
    #       -v "/app/node_modules" \
    #       ofig-main:latest \
    #       npm run check
    # - name: Clean up Dev Docker Compose services (if built for Biome)
    #   if: always()
    #   run: docker compose -f docker-compose.yml down ofig-main